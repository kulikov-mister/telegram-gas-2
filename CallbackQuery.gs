function callbackQuery(TelegramJSON) {//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let options = {
    chat_id: TelegramJSON.callback_query.message.chat.id,
    message_id: TelegramJSON.callback_query.message.message_id,
    data: TelegramJSON.callback_query.data,
    parse_mode: 'HTML',
    disable_web_page_preview: true,
    disable_notification: true,
    text: '' || TelegramJSON.callback_query.message.text,
    reply_markup: '',
  }
  let userProperties = PropertiesService.getUserProperties();  
  // callback_query
  if(Bot.isCallbackQuery()) {
    let a = Bot.getSystemUser();
    if(a && a.isAuth) {
      let cb = TelegramJSON.callback_query;
      let msg = '', msg2 = '';
      if(options.data === 'menu_1') {
        if (superAdmin.includes(Bot.getUserID())) {
          Bot.sendChatAction();
          msg = "<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ú–ï–ù–Æ:</b>\n\n<i>–≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞.</i>";
          Bot.editMessageKeyboard(msg, options.message_id, null, {'inline_keyboard': menu[4]});
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
          return;
        }
        else{
          Bot.sendChatAction();
          msg = "<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ú–ï–ù–Æ:</b>\n\n<i>–≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞.</i>";
          Bot.editMessageKeyboard(msg, options.message_id, null, {'inline_keyboard': menu[1]});
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
          return;
        }
      }
      if(options.data === 'menu_start'){
        Bot.sendChatAction();
        msg = "<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ú–ï–ù–Æ:</b>\n\n<i>–≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞.</i>";
        Bot.editMessageKeyboard(msg, options.message_id, null, {'inline_keyboard': menu[0]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if(options.data === 'profile') {
        Bot.sendChatAction();
        let isb;
        if (cb.from.is_bot === 'true'){isb = " –î–∞"}else{isb = " –ù–µ—Ç"};
        let msg = "<i><b>ID        :</b></i> " + Bot.getUserID() + "\n" +
                  "<i><b>Username  :</b></i> " + Bot.getUsername() + "\n" +
                  "<i><b>First Name:</b></i> " + Bot.getUserFirstName() + "\n" +
                  "<i><b>Last Name :</b></i> " + [cb.from.last_name || ""] + "\n" +
                  "<i><b>–ë–æ—Ç       :</b></i> " + isb
        Bot.editMessageKeyboard(msg, options.message_id, null, {'inline_keyboard': menu[2]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === 'donate') {
        Bot.sendChatAction();
        Bot.editMessageKeyboard(msgd, options.message_id, null, {'inline_keyboard': menu[2]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === 'stop') {
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: 'ü•∫ –î–∞–ª—å—à–µ –ø—É—Å—Ç–æ' });
        return;
      }
      if (options.data === 'Settings') {
        Bot.sendChatAction();
        Bot.editMessageKeyboard('–í—ã –≤ –º–µ–Ω—é: <b>–ù–ê–°–¢–†–û–ô–ö–ò</b>', options.message_id, null, {'inline_keyboard': menu[3]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === 'translate') {
        Bot.sendChatAction();
        let lang_msg = `<a href="https://telegra.ph/List-Language-05-21"><i>–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–¥–æ–≤</i></a>`;
        Bot.editMessageKeyboard(`<b>C –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º?</b>\n\n${lang_msg}`, options.message_id, null, {'inline_keyboard': menu[9]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data.split('_')[1] === 'sourceL') {
        Bot.sendChatAction();
        let lang_msg = `<a href="https://telegra.ph/List-Language-05-21"><i>–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–¥–æ–≤</i></a>`;
        sl = options.data.split('_')[0];
        let keys = [[{text: 'RU', callback_data: `${sl}_tlang_ru`},{text: 'EN', callback_data: `${sl}_tlang_en`},{text: 'DE', callback_data: `${sl}_tlang_de`},{text: 'TK', callback_data: `${sl}_tlang_tk`}],
  [{text: 'KK', callback_data: `${sl}_tlang_kk`},{text: 'KY', callback_data: `${sl}_tlang_ky`},{text: 'LV', callback_data: `${sl}_tlang_lv`},{text: 'LT', callback_data: `${sl}_tlang_lt`}],
  [{text: 'RO', callback_data: `${sl}_tlang_ro`},{text: 'SR', callback_data: `${sl}_tlang_sr`},{text: 'ES', callback_data: `${sl}_tlang_es`},{text: 'FR', callback_data: `${sl}_tlang_fr`}],
  [{text: 'SK', callback_data: `${sl}_tlang_sk`},{text: 'SL', callback_data: `${sl}_tlang_sl`},{text: 'UZ', callback_data: `${sl}_tlang_uz`},{text: 'TG', callback_data: `${sl}_tlang_tg`}],
  [{text: 'PL', callback_data: `${sl}_tlang_pl`},{text: 'UK', callback_data: `${sl}_tlang_uk`},{text: 'BG', callback_data: `${sl}_tlang_bg`},{text: 'BE', callback_data: `${sl}_tlang_be`}],
  [{text: 'üè° –ù–∞–∑–∞–¥', callback_data: 'translate'}]];
        Bot.editMessageKeyboard(`<b>–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏–º?</b>\n\n${lang_msg}`, options.message_id, null, {'inline_keyboard': keys,});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data.split('_')[1] === 'tlang') {//–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—Ç—Ä–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        let user = {
          callback_query_data: options.data,
        };
        userProperties.setProperty(options.chat_id, JSON.stringify(user));
        Bot.editMessageText(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. (${options.data.split('_')[0]} => ${options.data.split('_')[2]})`, options.message_id, null);
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === 'schedule'){
        Bot.sendChatAction();
        if(schedule_msg !== ''){ //–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–µ—Ç—Å—è
          let msg = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóí';
          Bot.editMessageKeyboard(msg, options.message_id, null, {"inline_keyboard": [[{ text: '–û—Ç–∫—Ä—ã—Ç—å', url: schedule_msg }],[{text: 'üè° –ù–∞–∑–∞–¥', callback_data: 'menu_1'}]] });
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
          return;
        }
        else{
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: 'ü•∫ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç!'});
          return;
        }
      }
      if (options.data === 'courses') {
        Bot.sendChatAction();
        let res = [];
        nameOfSheets().forEach(function(item){res.push(`\n${item}`)});
        Bot.editMessageKeyboard(`<b>–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b> \n${res}`, options.message_id, null, {'inline_keyboard': menu[8]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'){
        let user = {
          callback_query_data: '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        };
        userProperties.setProperty(options.chat_id, JSON.stringify(user));
        Bot.editMessageKeyboard('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>', options.message_id, null, {'inline_keyboard': menu[8]});
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === '–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'){
        if (schedule_msg.trim() == '') { //–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–µ—Ç—Å—è
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: '‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç!'});
          return;
        }
        else {
          setSheetVal('Settings', 2, 1, '');//—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –≥—Ä–∞—Ñ—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: '‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!'});
          return;
        }
      }
      if (options.data === 'Examples') {
        let user = {
          callback_query_data: options.data,
        };
        userProperties.setProperty(options.chat_id, JSON.stringify(user));
        let data = getDataShhet('Examples');
        let msg = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞ </b>üëá';
        try{
          Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(data, undefined, return_key = "Settings").keyboard); 
        }
        catch{//–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
          Bot.deleteMessage(options.message_id);
          Bot.sendMessage(msg, {'reply_markup': keySheets(data, undefined, return_key = "Settings").keyboard});
        }
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
      }
      if (options.data === '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç') {
        let user = {
          callback_query_data: options.data,
        };
        userProperties.setProperty(options.chat_id, JSON.stringify(user));
        Bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.', options.message_id, null);
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (options.data === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–∫—Ü–∏–∏' || options.data === '–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª' || options.data === '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç' || options.data === '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª') {
        let user = {
          callback_query_data: options.data,
        };
        if (options.data === '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª') {
          msg = '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª üëá';
          userProperties.setProperty(options.chat_id, JSON.stringify(user));
          Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(nameOfSheets(), undefined, return_key = "menu_1").keyboard);
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        }
        if (options.data === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–∫—Ü–∏–∏') {
          msg = '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—åüëá'};
        if (options.data === '–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª') {
          msg = '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –º–∞—Ç–µ—Ä–∏–∞–ªüëá'};
        if (options.data === '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç') {
          msg = `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å`}; 
        
        if(nameOfSheets().length > 0){//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
          userProperties.setProperty(options.chat_id, JSON.stringify(user));
          Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(nameOfSheets(), undefined, return_key = "menu_1").keyboard);
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        }
        else{
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: 'ü•∫ –ó–¥–µ—Å—å –ø—É—Å—Ç–æ!' });
        }
        return;       
      }
      let sheets = keySheets(nameOfSheets()).nameOfSheets;
      let userData = JSON.parse(userProperties.getProperty(options.chat_id));
      if (sheets.includes(options.data) && userData.callback_query_data === '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç'){
        delSheet(options.data);
        Bot.editMessageKeyboard(`–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b>üëá`, options.message_id, null, keySheets(nameOfSheets(), undefined, return_key = "menu_1").keyboard);
      }
      if (sheets.includes(options.data)){//–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        let data = getDataShhet(options.data);
        if (data !== 0) { //–µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          let x = userData.callback_query_data;
          switch(x) {
            case '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–∫—Ü–∏–∏':
              userProperties.setProperty(options.chat_id, JSON.stringify({callback_query_data: `find_${msg}`}));
              Bot.editMessageKeyboard(`<b>${options.data}</b>` , options.message_id, null, keySheets(data).keyboard);
              Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
              break;
            case '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç':
              delSheet(options.data);
              Bot.editMessageKeyboard(`–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b>üëá`, options.message_id, null, keySheets(nameOfSheets(), undefined, return_key = "menu_1").keyboard);
              Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
              break;
            case '–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª':
              userProperties.setProperty(options.chat_id, JSON.stringify({callback_query_data: `deletem_${msg}`}));
              Bot.editMessageKeyboard(`–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –º–∞—Ç–µ—Ä–∏–∞–ªüëá` , options.message_id, null, keySheets(data).keyboard);
              Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
              break;
            default:
              Bot.request('answerCallbackQuery', { callback_query_id: cb.id});//–æ—Ç–≤–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–π 
              break;
          }
        }
        if (userData.callback_query_data === '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'){//–µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/–∏–ª–∏ –Ω–µ—Ç
          userProperties.setProperty(options.chat_id, JSON.stringify({callback_query_data: `addm_${options.data}`}));
          Bot.editMessageText('<b>–ü—Ä–∏—à–ª–∏—Ç–µ –í–∞—à –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.</b>', options.message_id);
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        }
        else {
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: 'ü•∫ –ó–¥–µ—Å—å –ø—É—Å—Ç–æ!' });
        }
      }
      if (options.data.includes('page')) {//–µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–ª–∏—Å—Ç–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–ø–∏—Å–∫–µ –ª–µ–∫—Ü–∏–π
        let page = options.data.substr(-1);
        let x = userData.callback_query_data;
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});//–æ—Ç–≤–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–π
        switch(x) {
          case '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–∫—Ü–∏–∏':
            msg = '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>üëá';
            Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(nameOfSheets(), page, return_key = "menu_1").keyboard);
            break;
          case '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª':
            msg = '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ <b>–¥–æ–±–∞–≤–∏—Ç—å</b> –º–∞—Ç–µ—Ä–∏–∞–ªüëá';
            Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(nameOfSheets(), page, return_key = "menu_1").keyboard);
            break;
          case '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç':
            msg = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b>üëá';
            Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(nameOfSheets(), page, return_key = "menu_1").keyboard);
            break;
          case '–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª':
            msg = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –º–∞—Ç–µ—Ä–∏–∞–ªüëá';
            Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(nameOfSheets(), page, return_key = "menu_1").keyboard); 
            break;
          case 'Examples':
            msg = '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é —Å—Ç–∞—Ç—å—é –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞ üëá';
            data = getDataShhet('Examples');
            Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(data, page, return_key = 'Settings').keyboard, {'disable_web_page_preview': true});
            break;
          default:
            Bot.request('answerCallbackQuery', { callback_query_id: cb.id});//–æ—Ç–≤–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–π 
            break;
        }
      }
      if (options.data.includes('page') && sheets.includes(options.text)) {//–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –Ω–∞–∂–∞—Ç–∏—è
        let page = options.data.substr(-1);
        let data = getDataShhet(options.text);
        let msg = '<b>'+userData.callback_query_data.split('_')[1]+'</b>';
        Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(data, page).keyboard);
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if(options.data.split('_')[0] === 'user') {//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if(options.data.split('_')[1] === 'approve') {
          Bot.authSystemUser(options.data.split('_')[2], true);
          msg  = "<i>–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.</i> –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!";
          msg2 = "–ó–∞–ø—Ä–æ—Å –æ—Ç <a href='tg://user?id="+options.data.split('_')[2] + "'>"+options.data.split('_')[2]+"</a> –±—ã–ª <b>–æ–¥–æ–±—Ä–µ–Ω</b> –≤–∞–º–∏.";
        }
        else if(options.data.split('_')[1] === 'deny') {
          Bot.authSystemUser(options.data.split('_')[2], false);
          msg  = "<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω!</i>";
          msg2 = "–ó–∞–ø—Ä–æ—Å –æ—Ç <a href='tg://user?id="+options.data.split('_')[2] + "'>"+options.data.split('_')[2]+"</a> –±—ã–ª <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω</b> –≤–∞–º–∏.";
        }
        Bot.sendMessage(msg, { chat_id: options.data.split('_')[2] });
        Bot.editMessageText(msg2, options.message_id);
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if(options.data.split('_')[0] === 'article') {//–∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        let data = getDataShhet(options.data.split('_')[1]);
        let msg = `<b>${options.data.split('_')[1]}</b>`;
        try{
          Bot.editMessageKeyboard(msg, options.message_id, null, keySheets(data).keyboard);
        }
        catch{
          Bot.deleteMessage(options.message_id);
          Bot.sendMessage(msg, {'reply_markup': keySheets(data).keyboard});
        }
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if(options.data === 'delete'){
        Bot.deleteMessage(TelegramJSON.callback_query.message.message_id);
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        return;
      }
      if (search_row(options.data, 'Examples') >= 0 && userData.callback_query_data === 'Examples'){//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç Examples
        let lastpost = SpreadsheetApp.openById(botSheet).getSheetByName('Examples').getRange(search_row(options.data, 'Examples'), 1, 1,  4).getValues()[0]
        let msg = '<b>üîé' + lastpost[0] + '</b>' + '\n\n'+ lastpost[1];
        Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        if (lastpost[3] == '–¢–µ–∫—Å—Ç') {
          Bot.editMessageKeyboard(msg, options.message_id, null, {'inline_keyboard': [[{ text: '–ö —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π', 'callback_data': `Examples` }]]}, {'disable_web_page_preview': false});
        }
        if (lastpost[3] == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') {
          Bot.deleteMessage(options.message_id);
          Bot.sendPhoto(msg, String(lastpost[2]), menu[10], {'disable_web_page_preview': false});
        }
        if (lastpost[3] == '–í–∏–¥–µ–æ') {
          Bot.deleteMessage(options.message_id);
          Bot.sendVideo(msg, String(lastpost[2]), menu[10], {'disable_web_page_preview': false});
        }
        if (lastpost[3] == '–ê—É–¥–∏–æ') {
          Bot.deleteMessage(options.message_id);
          Bot.sendAudio(msg, String(lastpost[2]), menu[10], {'disable_web_page_preview': false});
        }
        if (lastpost[3] == '–î–æ–∫—É–º–µ–Ω—Ç') {
          Bot.deleteMessage(options.message_id);
          Bot.sendDocument(msg, String(lastpost[2]), menu[10], {'disable_web_page_preview': false});
        }
      }
      let msgdata = userData.callback_query_data.split('_');
      if (search_row(options.data, options.text) >= 0) {
        if (msgdata[0] === 'find'){//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          let lastpost = SpreadsheetApp.openById(botSheet).getSheetByName(options.text).getRange(search_row(options.data, options.text), 1, 1,  4).getValues()[0]
          let msg = '<b>üîé' + lastpost[0] + '</b>' + '\n\n'+ lastpost[1];
          let x = lastpost[3]
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
          switch(x) {
            case '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
              Bot.deleteMessage(options.message_id);
              Bot.sendPhoto(msg, String(lastpost[2]), [[{'text': '–ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'callback_data': `article_${options.text}`}]]);
              break;
            case '–í–∏–¥–µ–æ':
              Bot.deleteMessage(options.message_id);
              Bot.sendVideo(msg, String(lastpost[2]), [[{'text': '–ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'callback_data': `article_${options.text}`}]]);
              break;
            case '–ê—É–¥–∏–æ':
              Bot.deleteMessage(options.message_id);
              Bot.sendAudio(msg, String(lastpost[2]), [[{'text': '–ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'callback_data': `article_${options.text}`}]]);
              break;
            case '–î–æ–∫—É–º–µ–Ω—Ç':
              Bot.deleteMessage(options.message_id);
              Bot.sendDocument(msg, String(lastpost[2]), [[{'text': '–ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'callback_data': `article_${options.text}`}]]);
              break;
            case '–¢–µ–∫—Å—Ç':
              Bot.editMessageKeyboard(msg, options.message_id, null,{'inline_keyboard': [[{ text: '–ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', callback_data: `article_${options.text}`}]],
                                                                     'disable_web_page_preview': false});
              break;
            default:
              Bot.request('answerCallbackQuery', { callback_query_id: cb.id, text: 'ü•∫ –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!' });
              break;
          }
        }
        if (msgdata[0] === 'deletem') {//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–µ–ª–∞–µ—Ç —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
          let SpreadSheet = SpreadsheetApp.openById(botSheet);
          let Sheet = SpreadSheet.getSheetByName(options.text);
          Sheet.deleteRow(search_row(options.data, options.text));
          let data = getDataShhet(msgdata[1]);
          Bot.editMessageKeyboard(`${msgdata[1]}` , options.message_id, null, keySheets(data, undefined, return_key = '–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª').keyboard);
          Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
        }
      }
    }
    else{//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
      let msg = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. \n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /addme, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.</i>";
      Bot.sendMessage(msg);
      Bot.request('answerCallbackQuery', { callback_query_id: cb.id});
      return;
    }
  }
}